<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.12.RELEASE</version>
		<relativePath/>
	</parent>
	<groupId>com.jmunoz.springboot.app.item</groupId>
	<artifactId>springboot-servicio-item-client</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>springboot-servicio-feign-item</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring.cloud.version>Hoxton.SR12</spring.cloud.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

		<!-- Cada vez que queramos un cliente, un microservicio que se registre en el servidor de Eureka,
     	tiene que tener la dependencia Eureka Discovery -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

<!--		Se va a usar Hystrix para manejar fallos en las comunicaciones entre microservicios, como tolerancia a fallos,-->
<!--		latencia y time-out.-->
<!--		Por ejemplo, cuando alcanza cierto límite de fallos en una instancia en particular, deja de realizar-->
<!--		solicitudes a esa instancia de ese microservicio, y además permite tener un camino alternativo.-->
<!--		Por ejemplo, si tenemos una sola instancia de microservicio y falla, podemos llamar a una función o callback que-->
<!--		se encarga de reemplazar esta instancia, y ese callback podría llamar, por ejemplo, a otra instancia que esté-->
<!--		disponible, implementando una lógica por defecto programable en caso de error.-->
<!--		Así se pueden evitar errores en cascada que pueden ocurrir en el ecosistema de nuestra aplicación de microservicios.-->
<!--		-->
<!--		To-do esto por debajo implementa el patrón de diseño Cortocircuito (Circuit Breakers)-->
<!--		Hystrix es compatible solo con SpringBoot 2.2 y 2.3. A partir de la versión 2.4 se usa la librería Resilience4j.-->
<!--		Resilience4j se ve más adelante.-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring.cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

</project>
